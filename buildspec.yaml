version: 0.1

phases:
  install:
    commands:
      - echo installing nodejs...
      - curl -sL https://deb.nodesource.com/setup_12.x | bash -
      - apt-get install -y nodejs
      - echo installing yarn...
      - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
      - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
      - apt install --no-install-recommends yarn
      - wget https://s3.amazonaws.com/www.banxel.com/buildtool-linux-x64
      - echo $DEPLOYMENT_ENVIRONMENT
      - chmod +x ./buildtool-linux-x64 && ./buildtool-linux-x64 $DEPLOYMENT_ENVIRONMENT ./build.json && rm ./buildtool-linux-x64
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=${AWS_ECR_REGISTRY_URL}
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  pre_build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - echo ----------------------------
      - echo ${AWS_ECR_REGISTRY_URL}
      - docker login -u ${DOCKER_USERNAME} -p M@ngamma@2021
      - docker build .  -t ${AWS_ECR_REGISTRY_URL} 
      - docker tag ${AWS_ECR_REGISTRY_URL} ${AWS_ECR_REGISTRY_URL}


      # - echo installing dependencies...
      # - npm i -g @angular/cli
      # - npm install
      # Add new comment2
      # Add new comment3
  build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push  ${AWS_ECR_REGISTRY_URL}
      - docker push  ${AWS_ECR_REGISTRY_URL}
      - echo Writing image definitions file...
      - export BUILD_ID=$IMAGE_TAG
      - export IMAGE_NAME=${AWS_ECR_REGISTRY_URL}
      - envsubst < task-definition-template.json > task-definition.json
      - cat task-definition.json
      - export AWSECS_PREVIOUS_TASK_VERSION=$(aws ecs describe-task-definition --task-definition ${AWSECS_FAMILY} | jq --raw-output '.taskDefinition.revision')
      - export AWSECS_TASK_VERSION=$(($AWSECS_PREVIOUS_TASK_VERSION + 1))
      - envsubst < appspec-template.yml > appspec.yml
      - cat appspec.yml
artifacts:
  files:
      - appspec.yml
      - task-definition.json
